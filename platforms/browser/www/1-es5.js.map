{"version":3,"sources":["node_modules/@ionic/core/dist/esm/ion-action-sheet-controller_8.entry.js"],"names":[],"mappings":"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","sourcesContent":["import { r as registerInstance, d as getIonMode, h, H as Host } from './chunk-d0403a2f.js';\nimport './chunk-1074393c.js';\nimport { g as createOverlay, h as dismissOverlay, j as getOverlay } from './chunk-d83bfeae.js';\nimport { o as openURL, c as createColorClasses } from './chunk-353a032e.js';\n\nclass ActionSheetController {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    /**\n     * Create an action sheet overlay with action sheet options.\n     *\n     * @param options The options to use to create the action sheet.\n     */\n    create(options) {\n        return createOverlay('ion-action-sheet', options);\n    }\n    /**\n     * Dismiss the open action sheet overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the action sheet.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the action sheet.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     * @param id The id of the action sheet to dismiss. If an id is not provided, it will dismiss the most recently opened action sheet.\n     */\n    dismiss(data, role, id) {\n        return dismissOverlay(document, data, role, 'ion-action-sheet', id);\n    }\n    /**\n     * Get the most recently opened action sheet overlay.\n     */\n    async getTop() {\n        return getOverlay(document, 'ion-action-sheet');\n    }\n}\n\nclass AlertController {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    /**\n     * Create an alert overlay with alert options.\n     *\n     * @param options The options to use to create the alert.\n     */\n    create(options) {\n        return createOverlay('ion-alert', options);\n    }\n    /**\n     * Dismiss the open alert overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the alert.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the alert.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     * @param id The id of the alert to dismiss. If an id is not provided, it will dismiss the most recently opened alert.\n     */\n    dismiss(data, role, id) {\n        return dismissOverlay(document, data, role, 'ion-alert', id);\n    }\n    /**\n     * Get the most recently opened alert overlay.\n     */\n    async getTop() {\n        return getOverlay(document, 'ion-alert');\n    }\n}\n\n/**\n * @deprecated Use `ion-router-link` instead.\n */\nclass Anchor {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * When using a router, it specifies the transition direction when navigating to\n         * another page using `href`.\n         */\n        this.routerDirection = 'forward';\n        this.onClick = (ev) => {\n            openURL(this.href, ev, this.routerDirection);\n        };\n    }\n    componentDidLoad() {\n        console.warn('The <ion-anchor> component has been deprecated. Please use an <ion-router-link> if you are using a vanilla JS or Stencil project or an <a> with the Angular router.');\n    }\n    render() {\n        const mode = getIonMode(this);\n        const attrs = {\n            href: this.href,\n            rel: this.rel\n        };\n        return (h(Host, { onClick: this.onClick, class: Object.assign({}, createColorClasses(this.color), { [mode]: true, 'ion-activatable': true }) }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null))));\n    }\n    static get style() { return \":host{--background:transparent;--color:var(--ion-color-primary,#3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\"; }\n}\n\nclass LoadingController {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    /**\n     * Create a loading overlay with loading options.\n     *\n     * @param options The options to use to create the loading.\n     */\n    create(options) {\n        return createOverlay('ion-loading', options);\n    }\n    /**\n     * Dismiss the open loading overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the loading.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the loading.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     * @param id The id of the loading to dismiss. If an id is not provided, it will dismiss the most recently opened loading.\n     */\n    dismiss(data, role, id) {\n        return dismissOverlay(document, data, role, 'ion-loading', id);\n    }\n    /**\n     * Get the most recently opened loading overlay.\n     */\n    async getTop() {\n        return getOverlay(document, 'ion-loading');\n    }\n}\n\nclass ModalController {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    /**\n     * Create a modal overlay with modal options.\n     *\n     * @param options The options to use to create the modal.\n     */\n    create(options) {\n        return createOverlay('ion-modal', options);\n    }\n    /**\n     * Dismiss the open modal overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the modal.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the modal.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     * @param id The id of the modal to dismiss. If an id is not provided, it will dismiss the most recently opened modal.\n     */\n    dismiss(data, role, id) {\n        return dismissOverlay(document, data, role, 'ion-modal', id);\n    }\n    /**\n     * Get the most recently opened modal overlay.\n     */\n    async getTop() {\n        return getOverlay(document, 'ion-modal');\n    }\n}\n\nclass PickerController {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    /**\n     * Create a picker overlay with picker options.\n     *\n     * @param options The options to use to create the picker.\n     */\n    create(options) {\n        return createOverlay('ion-picker', options);\n    }\n    /**\n     * Dismiss the open picker overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the picker.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the picker.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     * @param id The id of the picker to dismiss. If an id is not provided, it will dismiss the most recently opened picker.\n     */\n    dismiss(data, role, id) {\n        return dismissOverlay(document, data, role, 'ion-picker', id);\n    }\n    /**\n     * Get the most recently opened picker overlay.\n     */\n    async getTop() {\n        return getOverlay(document, 'ion-picker');\n    }\n}\n\nclass PopoverController {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    /**\n     * Create a popover overlay with popover options.\n     *\n     * @param options The options to use to create the popover.\n     */\n    create(options) {\n        return createOverlay('ion-popover', options);\n    }\n    /**\n     * Dismiss the open popover overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the popover.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the popover.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     * @param id The id of the popover to dismiss. If an id is not provided, it will dismiss the most recently opened popover.\n     */\n    dismiss(data, role, id) {\n        return dismissOverlay(document, data, role, 'ion-popover', id);\n    }\n    /**\n     * Get the most recently opened popover overlay.\n     */\n    async getTop() {\n        return getOverlay(document, 'ion-popover');\n    }\n}\n\nclass ToastController {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    /**\n     * Create a toast overlay with toast options.\n     *\n     * @param options The options to use to create the toast.\n     */\n    create(options) {\n        return createOverlay('ion-toast', options);\n    }\n    /**\n     * Dismiss the open toast overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the toast. For example, 'cancel' or 'backdrop'.\n     * @param id The id of the toast to dismiss. If an id is not provided, it will dismiss the most recently opened toast.\n     */\n    dismiss(data, role, id) {\n        return dismissOverlay(document, data, role, 'ion-toast', id);\n    }\n    /**\n     * Get the most recently opened toast overlay.\n     */\n    async getTop() {\n        return getOverlay(document, 'ion-toast');\n    }\n}\n\nexport { ActionSheetController as ion_action_sheet_controller, AlertController as ion_alert_controller, Anchor as ion_anchor, LoadingController as ion_loading_controller, ModalController as ion_modal_controller, PickerController as ion_picker_controller, PopoverController as ion_popover_controller, ToastController as ion_toast_controller };\n"],"sourceRoot":"webpack:///"}